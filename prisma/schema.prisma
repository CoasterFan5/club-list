datasource db {
	provider = "postgres"
	url = env("DBURL")
}

generator client {
	provider = "prisma-client-js"
}

model Session {
	id 	         Int      @id @default(autoincrement())
	createdAt    DateTime @default(now())
	sessionToken String   @unique
	userId       Int
	user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
	id 	          Int      @id @default(autoincrement())
	createdAt     DateTime @default(now())
	updatedAt     DateTime @updatedAt
	email         String   @db.VarChar(255) @unique
	hash          String   @db.VarChar(1000)
	salt          String   @db.VarChar(255)
	firstName     String   @db.VarChar(255)
	lastName      String   @db.VarChar(255)
	pfp			  String?  @db.VarChar(255)
	organization  Organization[]
	orgUsers      OrgUser[]
	clubs 	      Club[]
	sessions      Session[]
	clubUsers     ClubUser[]
	announcements Announcement[]
	events        Event[]
}

model OrgUser {
	createdAt      DateTime     @default(now())
	role           String
	organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
	organizationId Int
	user 	       User         @relation(fields: [userId], references: [id])
	userId 	       Int

	@@id([organizationId, userId])
}

model ClubUser {
	createdAt      DateTime  @default(now())
	club           Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
	clubId         Int
	user 	       User      @relation(fields: [userId], references: [id])
	userId 	       Int
	roleId         Int?
	role           ClubRole? @relation(fields: [roleId], references: [id])

	@@id([clubId, userId])
}

model Organization {
	id 	       Int       @id @default(autoincrement())
	name 	   String    @db.VarChar(255)
	owner 	   User      @relation(fields: [ownerId], references: [id])
	ownerId    Int
	orgUsers   OrgUser[]
	clubs      Club[]
	joinCode   String	 @unique
}

model Club {
	id 	           Int           @id @default(autoincrement())
	createdAt      DateTime?     @default(now())
	updatedAt      DateTime?     @updatedAt
	name 	       String        @db.VarChar(255)
	description    String?
	imageURL       String?
	owner 	       User          @relation(fields: [ownerId], references: [id])
	ownerId        Int
	organization   Organization  @relation(fields: [organizationId], references: [id])
	organizationId Int
	clubUsers      ClubUser[]
	announcements  Announcement[]
	events         Event[]
	roles          ClubRole[]
	openToJoin     Boolean       @default(true)
}

model Event {
	id          Int @id @default(autoincrement())
	createdAt   DateTime? @default(now())
	updatedAt   DateTime? @updatedAt
	title       String
	description String?
	clubId      Int
	authorId    Int?
	author      User? @relation(fields: [authorId], references: [id])
	club        Club @relation(fields: [clubId], references: [id])
	// An RRULE string
	date        String
	// A list of RRULE strings
	exclusions  String[]
}

model Announcement {
	id          Int @id @default(autoincrement())
	createdAt   DateTime? @default(now())
	updatedAt   DateTime? @updatedAt
	title       String 
	description String? 
	clubId      Int
	club        Club @relation(fields: [clubId], references: [id])
	authorId    Int?
	author      User? @relation(fields: [authorId], references: [id])
}

model ClubRole {
	id            Int @id @default(autoincrement())
	createdAt     DateTime @default(now())
	updatedAt     DateTime @updatedAt
	name          String
	color         String
	permissionInt Int
	clubId        Int
	club          Club @relation(fields: [clubId], references: [id])
	members       ClubUser[]
}
